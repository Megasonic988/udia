#!/usr/bin/env node
"use strict";

let server = require("../dist/server/server");
let debug = require("debug")("express:server");
let http = require("http");
let https = require("https");
let fs = require("fs");
let path = require("path");

let httpPort = normalizePort(process.env.HTTP_PORT || 8080);
let httpsPort = normalizePort(process.env.HTTPS_PORT || 8443);

let options = {
  key: fs.readFileSync(path.join(__dirname, "..", "cert", "key.pem")),
  cert: fs.readFileSync(path.join(__dirname, "..", "cert", "cert.pem"))
};

let app = server.Server.bootstrap().app;
let httpServer = http.createServer(app);
let httpsServer = https.createServer(options, app);

httpServer.listen(httpPort);
httpServer.on("error", onError);
httpServer.on("listening", onListening);

httpsServer.listen(httpsPort);
httpsServer.on("error", onError);
httpsServer.on("listening", onListening);

/*
console.log("Running HTTP  on\t" +
  httpServer.address().address + "\t" +
  httpServer.address().family + "\tport " +
  httpServer.address().port);

console.log("Running HTTPS on\t" +
  httpsServer.address().address + "\t" +
  httpsServer.address().family + "\tport " +
  httpsServer.address().port);
*/

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let port = httpPort;

  let bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = httpServer.address();
  let bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}